<i18n:domain i18n:domain="collective.contact.widget"
             xmlns:tal="http://xml.zope.org/namespaces/tal"
             xmlns:metal="http://xml.zope.org/namespaces/metal"
             xmlns:i18n="http://xml.zope.org/namespaces/i18n">
<script type="text/javascript">
var ccw = {};
$(document).ready(function() {
  ccw.get_contact_infos = function(el){
      /*Get path, title and url of contact from contact page
      */
      objpath_input = el.find('input[name=objpath]');
      if (objpath_input.length) {
          return objpath_input.val().split('|');
      }
      else{
          return null;
      }
  };
  ccw.fillAutoComplete = function (responseElement, linkElement) {
    var data = ccw.get_contact_infos(responseElement);
    if (data !== null) {
        var input_box = linkElement.parents('div.field').find('.querySelectSearch input');
        formwidget_autocomplete_new_value(input_box, data[0], data[1]);
        input_box.flushCache();
        // trigger change event on newly added input element
        var input = input_box.parents('.querySelectSearch').parent('div').siblings('.autocompleteInputWidget').find('input').last();
        var url = data[3];
        ccw.add_contact_preview(input, url);
        input.trigger('change');
    }
  };
  ccw.fill_autocomplete = function (el, pbo, noform) {
      /* jquery tools onSuccess callback */
    ccw.fillAutoComplete(el, pbo.source);
    return noform;
  };
  ccw.mockup_fill_autocomplete = function (mockupModal, response, state, xhr, form) {
      /* mockup modal onSuccess callback */
      var responseElt = $(response);
      var linkElement = mockupModal.$el;
      ccw.fillAutoComplete(responseElt, linkElement);
  };
  window.ccw_mockup_fill_autocomplete = ccw.mockup_fill_autocomplete;

  var pendingCall = {timeStamp: null, procID: null};
  ccw.add_contact_preview = function (input, url) {
    if (url) {
        input.siblings('.label')
            .wrapInner('<a href="'+url+'" target="_new" class="link-tooltip">');
    }
  };
  window.ccwMockupPrefillTitle = function(modal){
    var searchInput = modal.$el.parents('.field').find('.querySelectSearchInput').find('input')
  	var value = searchInput.val();
    var modalForm = modal.$modal.find('form');
  	if (value) {
      modalForm.find("input[id$='-title']").val(value);
    	modalForm.find('#form-widgets-lastname').each(function(){
   		var lastnameInput = jQuery(this);
   		var firstnameInput = modalForm.find('#form-widgets-firstname');
   		var splitname = value.split(' ');
   		if(splitname.length === 1){
   			lastnameInput.val(splitname[0]);
   		} else if(splitname.length > 1){
   			firstnameInput.val(splitname[0]);
   			lastnameInput.val(splitname.slice(1, splitname.length).join(' '));
   		}
   	})
   }
  };

  $(document).on('mouseleave', '.link-tooltip', function() {
    if (pendingCall.procID) {
      clearTimeout(pendingCall.procID);
      pendingCall.procID = null;
    }
  });
  $(document).on('mouseenter', '.link-tooltip', function() {
    var common_content_filter = '#content>*:not(div.configlet),dl.portalMessage.error,dl.portalMessage.warning,dl.portalMessage.info';

    var trigger = $(this);
    // don't open tooltip in tooltip
    if (trigger.closest('.tooltip').length) {
        return;
    }
    if (!trigger.data('tooltip')) {
      if (pendingCall.procID) {
        clearTimeout(pendingCall.procID);
      }
      var timeStamp = new Date();
      var tooltipCall = function() {
          $('<div class="tooltip pb-ajax" style="display:none">%(wait_msg)s</div>').insertAfter(trigger);
          trigger.tooltip({relative: true, position: "center right"});
          var tooltip = trigger.tooltip();
          tooltip.show();
          var url = trigger.attr('href');
          $.get(url, {ajax_load: new Date().getTime()}, function(data) {
            tooltip.hide();
            tooltip.getTip().html($('<div />').append(
                    data.replace(/<script(.|\s)*?\/script>/gi, ""))
                .find(common_content_filter));
            if (pendingCall.timeStamp === timeStamp) {
                tooltip.show();
            }
            pendingCall.procID = null;
          });
      };
      pendingCall = {timeStamp: timeStamp,
                     procID: setTimeout(tooltipCall, 500)};
    }
  });
});
</script>
<style type="text/css">
.tooltip {
  overflow: hidden;
}
.tooltip, #calroot {
  z-index: 99999;
}
</style>
</i18n:domain>
